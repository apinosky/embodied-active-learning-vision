<?xml version="1.0" ?>

<launch>
    <arg name="use_gui" default ="False" />
    <arg name="debug" default ="False" />
    <arg name="pybullet" default ="False" />
    <arg name="render_pybullet" default ="False" />
    <arg name="dt" default="0.2"/>
    <arg name="seed" default="1"/>
    <arg name="explr_method" default="entklerg"/>
    <arg name="sensor_method" default="rgb"/>
    <arg name="sensor_mod" default=""/>
    <arg name="cam_z" default="0.4"/>
    <arg name="path_mod" default="_xyw_plant_duck"/>
    <arg name="test_config_file" default="test_config.yaml"/>
    <arg name="distributed" default="true"/>
    <arg name="ddp" default="true"/>
    <arg name="async" default="false"/>
    <arg name="num_trainers" default="4"/>
    <arg name="image_viewer" default ="False" />
    <arg name="clustering" default ="True" />
    <arg name="start_camera" default ="False" />
    <arg name="data_to_ctrl_rate" default ="1" />
    <arg name="explr_states" default ="xyw" />

    <!-- params -->
    <param name="base_path" value="$(find franka_test)" type="string" />
    <param name="explr_method" value="$(arg explr_method)" type="string" />
    <param name="sensor_method" value="$(arg sensor_method)" type="string" />
    <param name="sensor_mod" value="$(arg sensor_mod)" type="string" />
    <param name="seed" value="$(arg seed)" type="int" />
    <param name="pybullet" value="$(arg pybullet)" type="bool" />
    <param name="clustering" value="$(arg clustering)" type="bool" />
    <param name="dt" value="$(arg dt)" type="double" />
    <param name="render_pybullet" value="$(arg render_pybullet)" type="bool" />
    <param name="cam_z" value="$(arg cam_z)" type="double" />
    <param name="path_mod" value="$(arg path_mod)" type="str" />
    <param name="test_config_file" value="$(arg test_config_file)" type="str" />
    <param name="num_trainers" value="$(arg num_trainers)" type="int" />
    <param name="distributed" value="$(arg distributed)" type="bool" />
    <param name="ddp" value="$(arg ddp)" type="bool" />
    <param name="async" value="$(arg async)" type="bool" />
    <param name="test_path" value="" type="string" />
    <param name="data_to_ctrl_rate" value="$(arg data_to_ctrl_rate)" type="int" />
    <param name="explr_states" value="$(arg explr_states)" type="str" />

    <!-- test nodes -->
    <node name="sensor_main" pkg="franka_test" type="sensor_main" respawn="false" output="screen" required="true"/>

    <!-- auto-recovery node -->
    <node name="random_listener" pkg="franka_test" type="random_listener" respawn="false" output="screen" required="false" unless="$(arg pybullet)">
        <param name="fix_ee" type="bool" value="$(eval (arg('explr_method')!='uniform'))"/>
    </node>
     <!-- unless="$(eval explr_method == 'entklerg')"/> -->

    <!-- clustering node -->
    <!-- <node name="clustering" pkg="franka_test" type="clustering" respawn="false" output="screen" required="false" if="$(arg clustering)"/> -->

    <!-- simulation node (need to run start_robot.launch if not using this) -->
    <!-- <node name="pybullet_service" pkg="franka_test" type="pybullet_service" respawn="false" output="log" if="$(arg pybullet)" /> -->

    <!-- gui -->
    <node name="gui" pkg="franka_test" type="gui" respawn="false" output="screen" if="$(arg use_gui)" />

    <!-- image nodes -->
    <group if="$(eval (arg('sensor_method')=='rgb') or (arg('sensor_method')=='intensity'))">
      <arg name="img_name" value="/usb_cam/image_raw" />

      <node name="republish" type="republish" pkg="image_transport" output="screen" args="compressed in:=$(arg img_name) raw out:=/usb_cam/image" unless="$(arg pybullet)"/>

      <!-- <node name="republish" type="republish" pkg="image_transport" output="screen" args="compressed in:=$(arg img_name) raw out:=/usb_cam/image_raw" if="$(arg pybullet)"/> -->
      <include file="$(find franka_test)/launch/start_camera.launch" if="$(arg start_camera)"/>
    </group>

    <group if="$(arg debug)">

        <arg name="image_viewer" default ="True" />

        <!-- dummy node to publish poses normally from franka -->
        <node name="dummy_service" pkg="franka_test" type="dummy_service" respawn="false" output="screen"/>

        <!-- load camera -->
        <!-- This node launches the usb camera at video node 2 -->
        <node name="usb_cam" pkg="usb_cam" type="usb_cam_node" output="screen" >x
            <param name="video_device" value="/dev/video2" />
            <param name="image_width" value="320" />
            <param name="image_height" value="240" />
            <param name="pixel_format" value="yuyv" />
            <param name="camera_frame_id" value="usb_cam1" />
            <param name="io_method" value="mmap"/>
        </node>

    </group>

    <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen" if="$(arg image_viewer)">
      <!-- publishes the image  -->
      <remap from="image" to="/usb_cam/image"/>
      <param name="autosize" value="true" />
    </node>

    <node name="image_view2" pkg="image_view" type="image_view" respawn="false" output="screen" if="$(arg image_viewer)">
      <!-- publishes the image  -->
      <remap from="image" to="/usb_cam/image_raw"/>
      <param name="autosize" value="true" />
      <param name="image_transport" value="compressed" />
    </node>

</launch>
