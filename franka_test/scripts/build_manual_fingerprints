#!/usr/bin/env python

########## global imports ##########
import numpy as np
import matplotlib.pyplot as plt
import pickle
import os
import yaml
import time
import torch
from termcolor import cprint
import rospy

########## local imports ##########
import sys, os
from franka.franka_utils import ws_conversion
from plotting.plotting_matplotlib import Plotter,EvalPlotter
from control.klerg_utils import *
from dist_modules.sensor_utils import get_circular_traj, get_grid_traj
from dist_modules.sensor_test_module import SensorTest, ExplrDist
from dist_modules.fingerprint_builder import FingerprintBuilder

if __name__== '__main__':

    start_x = rospy.get_param("start_x", 0.5365)
    start_y = rospy.get_param("start_y", -0.081)
    num_steps = rospy.get_param("num_steps", 12)
    fixed_seed = rospy.get_param("fixed_seed", False)
    save_fingerprint = rospy.get_param("save_fingerprint", False)
    fingerprint_name = rospy.get_param("fingerprint_name", "test")
    test_method = rospy.get_param("test_method", "explr")
    save_folder = rospy.get_param("save_folder", "eval/")
    model_path = rospy.get_param("model_path", "model_final.pth")
    explr_states = rospy.get_param("explr_states", "xyzw")
    skip = rospy.get_param("skip", 1)
    test_path = rospy.get_param('test_path', 'data/intensity/entklerg_0000/')
    base_path = rospy.get_param('base_path', './')
    dir_path = base_path + '/' + test_path + '/'
    print(test_method,num_steps)

    center = [start_x, start_y]
    target_dist = None
    use_vel = False
    # Generate test positions
    if test_method == 'circle':
        circle_radius = rospy.get_param("circle_radius", 0.06)
        test_traj = get_circular_traj(radius=circle_radius,num_points=num_steps,center=center)
    elif test_method == 'grid':
        grid_size = rospy.get_param("grid_size", 0.01)
        test_traj = get_grid_traj(grid_size=grid_size,num_points=num_steps,center=center)
    elif test_method == 'explr':
        target_dist = ExplrDist(explr_idx=np.arange(len(explr_states))) # if xyw
        target_dist.init = True
        test_traj = np.array([center])
        use_vel = True

    # set up plotting
    if not use_vel:
        fig,ax = plt.subplots(1,1)
        ax.plot(test_traj[:,0],test_traj[:,1],'*-')
        plt.show(block=False)

    test = SensorTest(target_dist,num_steps=num_steps,init_vel=False)
    fp = FingerprintBuilder(dir_path=dir_path,model_path=model_path,buffer_name=None,buffer='dummy')
    plot = EvalPlotter(path=test.dir_path,sim=test.pybullet,method=test.explr_method,save_folder=save_folder+'/fp_figs/')

    if test.learn_force:
        raise NotImplementedError('need to add force stuff here')

    test.vel_states = not (explr_states == explr_states.lower()) # check for capital letters
    if test.vel_states:
        raise NotImplementedError('need to add velocity stuff here')

    ## save start_pos
    pos = ws_conversion(test.xinit,test.robot_lim,test.tray_lim)

    ## get explr_idx
    explr_idx =[]
    preferred_order = 'xyzw'
    for state in preferred_order:
        if state in explr_states:
            explr_idx.append(test.states.rfind(state))

    # reshape xy to full state
    new_traj = pos[None,:].repeat(len(test_traj),0)
    new_traj[:,test.plot_idx[0]] = test_traj[:,0]
    new_traj[:,test.plot_idx[1]] = test_traj[:,1]

    new_center = pos.copy()
    new_center[test.plot_idx[0]] = center[0]
    new_center[test.plot_idx[1]] = center[1]


    # set seed / go to start location
    if fixed_seed:
        success,[x,y,force] = test.step(0,pos=new_center)
        y_pred,init_model = fp.init_model(x,y,force)
        seed = fp.reshape(y)
        plot.update(seed,fp.reshape(y),fp.reshape(y_pred.squeeze()))
        plot.save(f'seed_{fingerprint_name}')
    else:
        cprint('[TEST] moving to fingerprint','cyan')
        new_center = new_traj[0].copy()
        test.use_pose() # switch back to pose controller
        at_center = test.check_goal_pos(new_center,-1)
        if not at_center: 
            cprint("[TEST] didn't make it to the starting pose","cyan")


    # switch mode
    robot_center = ws_conversion(new_center, test.tray_lim, test.robot_lim)
    if use_vel:
        vals = np.ones(len(explr_states))
        locs = robot_center[explr_idx].copy()
        if 'blank' in fingerprint_name:
            scale = 0.02
        else:
            scale = 0.15
        for idx,state in enumerate(explr_states):
            if state in 'xyz':
                vals[idx] *= 0.01
            else:
                vals[idx] *= 2
                locs[idx] = 0. # center angles
        target_dist.push(locs,vals)
        # target_dist.push(locs,0.1 if 'blank' in fingerprint_name else 0.15)
        test.start_explr(robot_center[explr_idx],explr_states=explr_states)
        test.robot.weight_env = False
        test.robot.weight_temp = False
        test.robot.test(test.num_target_samples)
        # overwrite tray lims so boundaries keep it near the object
        plot_dim_scale = 0.4
        test.robot.std[:] = test.std / 10.
        new_lims = robot_center[test.plot_idx][:,None] + np.array([-1.,1.])*plot_dim_scale
        test.robot.update_lims(test.plot_idx,new_lims)
        # test.robot.barrier.barr_weight[test.plot_idx[0]] = 0. 
        # test.robot.barrier.barr_weight[test.plot_idx[1]] = 0. 
        test.robot.test_corners = False

        if not test.pybullet: 
            time.sleep(3)

    # fingerprint
    if save_fingerprint:
        fingerprint_mu = []
        fingerprint_var = []
        fingerprint_x = []
        if test.learn_force: 
            fingerprint_force = []

    # main loop
    done = False
    iter_step = 0
    save_rate = 1 + skip
    fig1 = False
    while not rospy.is_shutdown() and not done:
        while iter_step < num_steps*save_rate:
            if test.got_state and test.got_img and not(test.pause):
                if use_vel and not fig1: # set up plotting
                    plot_explr = Plotter(test.plot_idx,test.xinit,path=test.dir_path,plot_zs=False,robot_lim=test.robot_lim, tray_lim=test.tray_lim,states=test.states)
                    fig1 = True
                if iter_step == 0 and test_method=='explr':
                    plot_explr.update_samples(test.robot.lims[test.plot_idx])

                args = {'iter_step':iter_step} if use_vel else {'pos':new_traj[iter_step].copy()}
                success,out = test.step(**args)
                if success:
                    x,y,force = out
                    # verify x is different from last saved value before proceeding
                    if iter_step == 0 or (np.linalg.norm(fingerprint_x[-1]-x) > 1e-3):
                        stuck_count = 0
                        if not fixed_seed:
                            y_pred,latent_space = fp.init_model(x,y,force)
                            seed = fp.reshape(y)
                            if save_fingerprint and iter_step % save_rate == 0 :
                                fingerprint_mu.append(latent_space[0])
                                fingerprint_var.append(latent_space[1])
                                fingerprint_x.append(x)
                                if test.learn_force: 
                                    fingerprint_force.append(force)
                        else:
                            y_pred = fp.get_prediction(x)
                        # update_figs
                        plot.update(seed.copy(),fp.reshape(y).copy(),fp.reshape(y_pred.squeeze()).copy(),latent_space)
                        if save_fingerprint and iter_step % save_rate == 0 :
                            plot.set_fingerprint_label(f'Fingerprint {fingerprint_name[-1]}')
                            img_center = seed.copy()
                            if iter_step == 0 :
                                plot.save(f'../center_{fingerprint_name}')
                            plot.save(f'{fingerprint_name}_eval{iter_step//save_rate}')
                        if use_vel:
                            if test.explr_update is not None:
                                plot_explr.update(test.explr_update)
                                test.explr_update = None
                        else:
                            print(iter_step,test_traj[iter_step])
                            # ax.plot(*test_traj[iter_step],'ro')
                        iter_step += 1
                    else:
                        print(f'stuck at step {iter_step}')
                        stuck_count += 1 
                        if stuck_count > 1: 
                            test.fix_yaw()
            test.rate.sleep()

        test.stop_pub.publish()
        if save_fingerprint:
            fingerprint_dict = {
                "z_mu":np.array(fingerprint_mu),
                "z_var":np.array(fingerprint_var),
                "x":np.array(fingerprint_x),
                "center":np.array(robot_center),
                "center_img":np.array(img_center)
            }
            if test.learn_force: 
                fingerprint_dict["force"] = np.array(fingerprint_force)
            pickle.dump( fingerprint_dict, open( test.dir_path+f"{save_folder}/{fingerprint_name}_{test_method}.pickle", "wb" ) )
        print('done')
        done = True
        plot.close()